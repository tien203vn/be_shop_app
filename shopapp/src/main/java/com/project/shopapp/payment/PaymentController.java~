package com.project.shopapp.payment;


import com.project.shopapp.exceptions.DataNotFoundException;
import com.project.shopapp.models.OrderStatus;
import com.project.shopapp.services.OrderService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("${api.prefix}/payment")
@RequiredArgsConstructor
public class PaymentController {
    private final PaymentService paymentService;
    private final OrderService orderService;

    public PaymentController(PaymentService paymentService, OrderService orderService) {
        this.paymentService = paymentService;
        this.orderService = orderService;
    }

    @GetMapping("/vn-pay")
    public ResponseObject<PaymentDTO.VNPayResponse> pay(HttpServletRequest request) {
        return new ResponseObject<>(HttpStatus.OK, "Success", paymentService.createVnPayPayment(request));
    }

    @GetMapping("/vn-pay-callback")
    public ResponseObject<PaymentDTO.VNPayResponse> payCallbackHandler(HttpServletRequest request) throws DataNotFoundException {
        String status = request.getParameter("vnp_ResponseCode");
        String orderId = request.getParameter("vnp_TxnRef");

        if (status.equals("00")) {
            // Cập nhật trạng thái đơn hàng thành COMPLETED
            orderService.updateOrderStatus(orderId, OrderStatus.PAID);
            return new ResponseObject<>(HttpStatus.OK, "Success", new PaymentDTO.VNPayResponse("00", "Success", "Link"));
        } else {
            // Có thể cập nhật trạng thái đơn hàng thành FAILED nếu cần
            orderService.updateOrderStatus(orderId, OrderStatus.FAILED);
            return new ResponseObject<>(HttpStatus.BAD_REQUEST, "Failed", null);
        }
    }

    @GetMapping("/payment_infor")
    public ResponseEntity<?> transaction(
            @RequestParam(value = "vnp_Amount") String amount,
            @RequestParam(value = "vnp_BankCode") String bankCode,
            @RequestParam(value = "vnp_OrderInfo") String order,
            @RequestParam(value = "vnp_ResponseCode") String responseCode
    ){
        if(responseCode.equals("00")){
            String redirectUrl = "http://localhost:4200/";
 //           return new ResponseObject<>(HttpStatus.OK, "Success", new PaymentDTO.VNPayResponse("00", "Success", "Link"));
            return new ResponseEntity<>(new PaymentDTO.VNPayResponse("00", "Success", redirectUrl), HttpStatus.OK);
        }else{
            return new ResponseObject<>(HttpStatus.BAD_REQUEST, "Failed", null);
        }
    }



}
